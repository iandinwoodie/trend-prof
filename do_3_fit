#!/usr/bin/perl -w

#
# see License.txt for copyright and terms of use
#

# Step 3: Fits the data for each basic block to several models.

use strict;
use File::Find;
use FindBin;
use lib $FindBin::Bin;
use trend_prof_common;
my $debugMode = -f "$FindBin::Bin/.debug";
use Archive::Zip qw( :ERROR_CODES :CONSTANTS );

# TODO: describe this script

# cmd line, hard-wired stuff, checks
die "Usage: $0  linewiseDir  fitDir\n" unless (1 == $#ARGV);
my ($linewiseDir, $fitDir) = @ARGV;
die $linewiseDir unless (-d $linewiseDir);
mkdir $fitDir;
die $fitDir unless (-d $fitDir);

die unless defined $linewiseDir;
if ($linewiseDir !~ m|/$|) {
    $linewiseDir = "${linewiseDir}/";
}

# TODO: can probably replace this with an opendir / readdir loop
my @dataFiles;
sub collect_data_files {
    if (/^data\.zip\z/s) {
        # this implements the find flag -type f
        return unless -f $_;
        # this implements the find flag -printf '%P\n'
        my $name0 = $File::Find::name;
        die unless $name0 =~ s|^$linewiseDir||; # trailing '/' put onto $linewiseDir above
        push @dataFiles, $name0;
    }
}
# dsw: was this
# my @dataFiles = split(/\n/, `find $linewiseDir -follow -type f -name "data" -printf '%P\n'`);
File::Find::find( {wanted => \&collect_data_files, follow => 1}, $linewiseDir);
die "No data files found in $linewiseDir\n" unless @dataFiles;

#my @fitTypes = ('linear', 'powerlaw', 'log', 'exp');
my @fitTypes = ('linear', 'powerlaw');

my $res;
my $locsDone = 0;
foreach my $dataFile (@dataFiles) {
    my $infile = "$linewiseDir/$dataFile";
    my $stem = $dataFile; $stem =~ s,\.zip$,,g; 
    my $outfile = "$fitDir/$stem.fits.zip";
    die "STRANGE ERROR: '$infile' is gone" unless -f $infile;
    # out file
    my $fitZip = Archive::Zip->new();
    # in file
    my $dataptsZip = Archive::Zip->new();
    $dataptsZip->read($infile) == AZ_OK or die "ERROR: can't open '$infile'";
    # read sizes
    my @sizes = split("\t", $dataptsZip->contents("workload_sizes"));
    if (!@sizes) {
        die "STRANGE ERROR: $dataFile does not contain a 'workload_sizes' entry." if $debugMode;
        next;
    } 
    my @locs = $dataptsZip->memberNames();
    foreach my $loc (@locs) {
        next if "workload_sizes" eq $loc;
        my @ys = split(/\s+/, $dataptsZip->contents($loc));
        my @fits;
        foreach my $type (@fitTypes) {
            my @fit = fit($type, $loc, \@sizes, \@ys, $debugMode);
            if (@fit) {
                push(@fits, join("\t", $type, @fit));
            }
        } # end foreach fit
        if (@fits) {
            my $member = $fitZip->addString(join("\n", @fits), $loc);
            $member->desiredCompressionMethod( COMPRESSION_STORED );
        }
        $locsDone++;
        print "." if (0 == $locsDone % 100);
        print " " if (0 == $locsDone % 1000);
        print "\n" if (0 == $locsDone % 5000);
        print "\n" if (0 == $locsDone % 100000);
    }
    undef $dataptsZip;
    $res = $fitZip->writeToFileNamed($outfile);
    die "ERROR writing '$outfile' " unless AZ_OK == $res;
} # end foreach data file
print "\n***Processed $locsDone locations\n";
exit(0);

